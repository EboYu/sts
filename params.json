{"name":"STS","tagline":"SDN Troubleshooting System","body":"Ever had to manually dig through logs to find the one or two inputs that lead your controller software to break? STS seeks to eliminate this need, freeing you to debug the problematic code itself.\r\n\r\nSTS simulates the devices of your network, allowing you to programmatically generate tricky test cases, interactively examine the state of the network, and automatically find the exact inputs that are responsible for triggering a given bug.\r\n\r\n![sts architecture](http://www.eecs.berkeley.edu/~rcs/research/debugger_architecture.jpg)\r\n\r\n### Installation\r\n\r\nSTS depends on [pox](http://www.noxrepo.org/pox/about-pox/). To install STS, you'll just need to clone both repositories and load the hassel submodule:\r\n\r\n```\r\n$ git clone git://github.com/ucb-sts/sts.git\r\n$ cd sts\r\n$ git clone -b debugger git://github.com/ucb-sts/pox.git\r\n$ ./tools/install_hassel_python.sh\r\n```\r\n\r\n### Running STS\r\n\r\nFor a detailed step-by-step walkthrough of STS's use cases, see this [page](http://ucb-sts.github.io/sts/walkthrough).\r\n\r\nFor the impatient, take STS for a test drive with:\r\n\r\n```\r\n$ ./simulator.py\r\n```\r\n\r\nThis will boot up pox, generate a 20-switch FatTree network, and begin feeding in random inputs.\r\n\r\nYou can also run STS interactively:\r\n\r\n```\r\n$ ./simulator.py -c config/interactive.py\r\n```\r\n\r\nSTS can be used to replay previous executions:\r\n\r\n```\r\n$ ./simulator.py -c config/pox_example_replay.py\r\n```\r\n\r\nFinally, STS is able to identify the minimal set of inputs that trigger a given bug:\r\n\r\n```\r\n$ ./simulator.py -c config/pox_example_mcs.py\r\n```\r\n\r\nYou can turn up the verbosity of the simulator's console output by passing the '-v' flag to simulator.py. \r\n\r\n### Configuring your own experiments\r\n\r\nThe simulator automatically copies your configuration parameters, event logs, and console output into the `experiments/` directory for later examination.\r\n\r\nThe [config/](https://github.com/ucb-sts/sts/tree/master/config) directory contains sample configurations. You can specify your own config file by passing its path:\r\n\r\n```\r\n$ ./simulator.py -c config/my_config.py\r\n```\r\n\r\nSee [config/README](https://github.com/ucb-sts/sts/blob/master/config/README) for more information on how to write configuration files. \r\n\r\n### Dependencies\r\n\r\nSTS requires python 2.7+\r\n\r\nTo check network invariants with headerspace analysis, you will need to load [hassel](https://bitbucket.org/peymank/hassel-public) as a submodule and build it: \r\n```\r\n$ ./tools/install_hassel_python.sh\r\n$ (cd sts/hassel/hassel-c && make -j)\r\n```\r\n\r\nNote that Hassel-C may not compile on Macintosh computers.\r\n\r\nTo use the advanced replay features of STS, you may need to install pytrie:\r\n```\r\n$ sudo pip install pytrie\r\n```\r\n\r\nFor remote controllers, we use the paramiko ssh client:\r\n```\r\n$ sudo pip install paramiko\r\n```\r\n\r\nInteractive mode depends on the readline module:\r\n```\r\n$ sudo pip install readline\r\n```\r\n\r\nUnit tests depends on the mock module:\r\n```\r\n$ sudo pip install mock\r\n```\r\n\r\n### Will I need to modify my controller to use sts?\r\n\r\nIf your controller supports OpenFlow 1.0, STS works out of the box. You'll only need to change one line in the config file to instruct STS how to launch your controller process(es).\r\n\r\n### Documentation\r\n\r\nFor a high-level overview of STS's software architecture, see this [page](http://ucb-sts.github.io/sts/software_architecture.html).\r\n\r\nFor searchable code documentation, see this [page](http://ucb-sts.github.io/documentation/).\r\n\r\nFor an overview of how to generate dataplane traffic in STS, see this [page](http://ucb-sts.github.io/sts/traffic_generation).\r\n\r\n### Interested in contributing?\r\n\r\nCheck out this [page](http://ucb-sts.github.io/sts/contribute.html).\r\n\r\n### Research\r\n\r\nFor more information about the research behind STS, see our \r\n[short](http://www.eecs.berkeley.edu/~rcs/research/sts_short.pdf) or \r\n[long](http://www.eecs.berkeley.edu/~rcs/research/sts.pdf) paper draft or our talk\r\n[slides](http://www.eecs.berkeley.edu/~rcs/research/selectiverecall.pptx).\r\n\r\nYou should also check out our\r\n[collection](http://ucb-sts.github.io/experiments/) of replayable\r\nexperiments that have been used to find and troubleshoot real bugs in SDN\r\ncontrollers:\r\n```\r\n$ git clone git://github.com/ucb-sts/experiments.git\r\n```\r\n\r\n### Questions?\r\n\r\nSend questions or feedback to: sts-dev@googlegroups.com\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}